# -*- coding: utf-8 -*-
# vim:set shiftwidth=4 softtabstop=4 expandtab textwidth=79:

from __future__ import print_function
from __future__ import absolute_import
from __future__ import division

import gdb
import sys

if sys.version_info.major >= 3:
    long = int

from crash.infra import CrashBaseClass
from crash.subsystem.storage import Storage as block
from crash.subsystem.storage import block_device_name

class DeviceMapper(CrashBaseClass):
    __types__ = [ 'struct dm_rq_clone_bio_info *',
                  'struct dm_target_io *' ]
    __symbol_callbacks__ = [
                ('end_clone_bio', '_register_end_clone_bio'),
                ('clone_endio', '_register_clone_endio') ]

    @classmethod
    def _register_end_clone_bio(cls, sym):
        if 'clone' in cls.dm_rq_clone_bio_info_p_type.target():
            getter = cls._get_clone_bio_rq_info_3_7
        else:
            getter = cls._get_clone_bio_rq_info_old
        cls._get_clone_bio_rq_info = getter
        block.register_bio_decoder(sym, cls.decode_clone_bio_rq)

    @classmethod
    def _register_clone_endio(cls, sym):
        if 'clone' in cls.dm_target_io_p_type.target():
            getter = cls._get_clone_bio_tio_3_15
        else:
            getter = cls._get_clone_bio_tio_old
        cls._get_clone_bio_tio = getter
        block.register_bio_decoder(sym, cls.decode_clone_bio)

    @classmethod
    def decode_clone_bio_rq(cls, bio):
        """
        Decodes a request-based device mapper cloned bio

        This method decodes a cloned bio generated by request-based
        device mapper targets.

        Args:
            bio(gdb.Value<struct bio>): A struct bio generated by a
                request-based device mapper target

        Returns:
            dict: Contains the following items:
                - description (str):  Human-readable description of the bio
                - bio (gdb.Value<struct bio>): The provided bio
                - tio (gdb.Value(<struct dm_target_io>): The struct
                  dm_target_io for this bio
                - next (gdb.Value<struct bio>): The original bio that was
                  the source of this one
                - decoder (method(gdb.Value<struct bio>)): The decoder for
                  the original bio
        """

        info = cls._get_clone_bio_rq_info(bio)

        # We can pull the related bios together here if required
        # b = bio['bi_next']
        # while long(b) != 0:
        #    b = b['bi_next']

        chain = {
            'bio' : bio,
            'tio' : info['tio'],
            'next' : info['orig'],
            'description' :
                '{:x} bio: Request-based Device Mapper on {}'.format(
                        long(bio), block_device_name(bio['bi_bdev'])),
            'decoder' : block.decode_bio,
        }

        return chain

    @classmethod
    def _get_clone_bio_rq_info_old(cls, bio):
        return bio['bi_private'].cast(cls.dm_rq_clone_bio_info_p_type)

    @classmethod
    def _get_clone_bio_rq_info_3_7(cls, bio):
        return container_of(bio, cls.dm_rq_clone_bio_info_p_type, 'clone')

    @classmethod
    def decode_clone_bio(cls, bio):
        """
        Decodes a bio-based device mapper cloned bio

        This method decodes a cloned bio generated by request-based
        device mapper targets.

        Args:
            bio(gdb.Value<struct bio>): A struct bio generated by a
                bio-based device mapper target

        Returns:
            dict: Contains the following items:
                - description (str): Human-readable description of the bio
                - bio (gdb.Value<struct bio>): The provided bio
                - tio (gdb.Value<struct dm_target_io>): The struct
                    dm_target_tio for this bio
                - next (gdb.Value<struct bio>): The original bio that was
                    the source of this one
                - decoder (method(gdb.Value<struct bio>)): The decoder for the
                    original bio
        """
        tio = cls._get_clone_bio_tio(bio)

        next_bio = tio['io']['bio']

        chain = {
            'description' : "{:x} bio: device mapper clone: {}[{}] -> {}[{}]".format(
                            long(bio),
                            block_device_name(bio['bi_bdev']),
                            long(bio['bi_sector']),
                            block_device_name(next_bio['bi_bdev']),
                            long(next_bio['bi_sector'])),
            'bio' : bio,
            'tio' : tio,
            'next' : next_bio,
            'decoder' : block.decode_bio,
        }

        return chain

    @classmethod
    def _get_clone_bio_tio_old(cls, bio):
        return bio['bi_private'].cast(cls.dm_target_io_p_type)

    @classmethod
    def _get_clone_bio_tio_3_15(cls, bio):
        return container_of(bio['bi_private'],
                            cls.dm_clone_bio_info_p_type, 'clone')
